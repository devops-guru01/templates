name: Deploy ECS & Deploy to ECS 
description: "Deploy to Amazon EKS"
author: "Praveen Sansaniwal"
inputs:
  deploy_branch:
    description: 'Branch to deploy from'
    required: true
    default: 'main'
  aws_region:
    description: 'AWS region'
    required: true
    default: 'us-west-2'
  ecr_repository:
    description: 'ECR repository'
    required: true
    default: 'my-app'
  service_name:
    description: 'Service name'
    required: true
    default: 'MyService'
  ecs_cluster_name:
    description: 'ECS cluster name'
    required: true
    default: 'my-cluster'
  dockerfile_path:
    description: 'Path to Dockerfile'
    required: true
    default: 'Dockerfile'
  app_port:
    description: 'Application port'
    required: true
    default: '80'
  task_defination:
    description: 'Task Defination Name'
    required: true
    default: 'mycluster'
  aws_access_key_id:
    description: 'AWS_ACCESS_KEY_ID'
    required: true
  aws_secret_access_key:
    description: 'AWS_SECRET_ACCESS_KEY'
    required: true
  docker_registry:
    description: 'AWS ECR Registry Like ACCOUNTID.dkr.ecr.REGION.amazonaws.com'
    required: true

runs:
  using: "composite"
  steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ inputs.aws_access_key_id }}
            aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
            aws-region: ${{ inputs.aws_region }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Determine Dockerfile path
          id: dockerfile-path
          shell: bash  
          run: |
            if [ -f "${{ inputs.dockerfile_path }}" ]; then
              echo "DOCKERFILE=${{ inputs.dockerfile_path }}" >> $GITHUB_OUTPUT
            elif [ -f "dockerfile" ]; then
              echo "DOCKERFILE=dockerfile" >> $GITHUB_OUTPUT
            elif [ -f "Dockerfile" ]; then
              echo "DOCKERFILE=Dockerfile" >> $GITHUB_OUTPUT
            else
              echo "No Dockerfile found"
              exit 1
            fi

        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          shell: bash  
          env:
            ECR_REGISTRY: ${{ inputs.docker_registry }}
            ECR_REPOSITORY: ${{ inputs.ecr_repository }}
            IMAGE_TAG: ${{ inputs.service_name }}-${{ github.sha }}
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ steps.dockerfile-path.outputs.DOCKERFILE }} .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
