name: Deploy to Amazon EKS

on:
  push:
    branches:
      - ${{ vars.DEPLOY_BRANCH || 'main' }}
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY || 'my-app' }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME || 'MyService' }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME || 'my-cluster' }}
  DOCKERFILE_PATH: ${{ vars.DOCKERFILE_PATH || 'Dockerfile' }}

permissions:
  contents: read

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: ${{ vars.ENVIRONMENT || 'production' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Determine Dockerfile path
      id: dockerfile-path
      run: |
        if [ -f "${{ env.DOCKERFILE_PATH }}" ]; then
          echo "DOCKERFILE=${{ env.DOCKERFILE_PATH }}" >> $GITHUB_OUTPUT
        elif [ -f "dockerfile" ]; then
          echo "DOCKERFILE=dockerfile" >> $GITHUB_OUTPUT
        elif [ -f "Dockerfile" ]; then
          echo "DOCKERFILE=Dockerfile" >> $GITHUB_OUTPUT
        else
          echo "No Dockerfile found"
          exit 1
        fi

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.SERVICE_NAME }}-${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ steps.dockerfile-path.outputs.DOCKERFILE }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: ${{ vars.KUBECTL_VERSION || 'latest' }}

    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ env.SERVICE_NAME }}-${{ github.sha }}
      run: |
        # Replace this with your actual deployment command
        # For example:
        # kubectl set image deployment/${{ env.SERVICE_NAME }} ${{ env.SERVICE_NAME }}=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Deploying $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG to EKS cluster ${{ env.EKS_CLUSTER_NAME }}"
        kubectl get nodes
